// import type { Linter } from 'eslint';
const config = {
    languageOptions: {
        parser: '@typescript-eslint/parser',
        parserOptions: {
            ecmaVersion: 2022,
            sourceType: 'module',
            project: './tsconfig.json',
            ecmaFeatures: {
                jsx: true,
            },
        },
        globals: {
            browser: true,
            node: true,
            es2022: true,
        },
    },
    plugins: {
        '@typescript-eslint': '@typescript-eslint/eslint-plugin',
        '@angular-eslint': '@angular-eslint/eslint-plugin',
        'angular': 'eslint-plugin-angular'
    },
    extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        'plugin:@angular-eslint/recommended',
        'plugin:@angular-eslint/template/process-inline-templates',
        'plugin:angular/recommended'
    ],
    rules: {
        // Custom Angular rules
        'no-host-binding-listener': 'error',
        'no-ngclass': 'error',
        'no-ngoptimizedimage-missing': 'error',
        'no-ngstyle': 'error',
        'no-signal-mutate': 'error',
        'no-standalone-true': 'error',
        'require-input-output-func': 'error',
        'require-onpush': 'error',
        // TypeScript strict rules
        '@typescript-eslint/no-explicit-any': 'error',
        '@typescript-eslint/explicit-function-return-type': 'warn',
        '@typescript-eslint/no-unused-vars': 'error',
        '@typescript-eslint/prefer-const': 'error',
        '@typescript-eslint/no-var-requires': 'error',
        // Angular best practices
        '@angular-eslint/component-selector': [
            'error',
            {
                type: 'element',
                prefix: 'app',
                style: 'kebab-case'
            }
        ],
        '@angular-eslint/directive-selector': [
            'error',
            {
                type: 'attribute',
                prefix: 'app',
                style: 'camelCase'
            }
        ],
        '@angular-eslint/no-output-native': 'error',
        '@angular-eslint/prefer-on-push-component-change-detection': 'error',
        '@angular-eslint/use-injectable-provided-in': 'error',
        // General code quality
        'prefer-const': 'error',
        'no-var': 'error',
        'object-shorthand': 'error',
        'prefer-template': 'error',
        'template-curly-spacing': 'error',
        'arrow-spacing': 'error',
        'no-duplicate-imports': 'error',
        'sort-imports': [
            'error',
            {
                ignoreCase: false,
                ignoreDeclarationSort: false,
                ignoreMemberSort: false,
                memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
                allowSeparatedGroups: true
            }
        ]
    },
    overrides: [
        {
            files: ['*.ts'],
            parserOptions: {
                project: './tsconfig.json',
            },
        },
        {
            files: ['*.component.ts'],
            rules: {
                '@angular-eslint/component-class-suffix': 'error',
                '@angular-eslint/component-max-inline-declarations': 'error',
            },
        },
        {
            files: ['*.service.ts'],
            rules: {
                '@angular-eslint/use-injectable-provided-in': 'error',
            },
        },
    ],
    settings: {
        'import/resolver': {
            typescript: {},
        },
    },
};
export default config;
